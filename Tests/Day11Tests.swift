//
//  Day11Tests.swift
//  Tests
//
//  Created by Valentin Cernuta on 11/12/2020.
//

import XCTest

class Day11Tests: XCTestCase {

	let input: String = """
	#.##.##.##
	#######.##
	#.#.#..#..
	####.##.##
	#.##.##.##
	#.#####.##
	..#.#.....
	##########
	#.######.#
	#.#####.##
	"""
	
	func testPart1Sample1() throws {
		let day: Day11 = Day11(data: input)
		XCTAssertEqual(["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"], "#.##.##.##".toArray())
		XCTAssertEqual(["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"], "#######.##".toArray())
		
		XCTAssertEqual([
			["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
			["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
			["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
			[".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
			["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
			["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
			["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"]
		], day.parts.to2D())
		
		day.array = day.parts.to2D()
		XCTAssertEqual([
			["#", ".", "L", "L", ".", "L", "#", ".", "#", "#"],
			["#", "L", "L", "L", "L", "L", "L", ".", "L", "#"],
			["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
			["#", "L", "L", "L", ".", "L", "L", ".", "L", "#"],
			["#", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
			["#", ".", "L", "L", "L", "L", "#", ".", "#", "#"],
			[".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
			["#", "L", "L", "L", "L", "L", "L", "L", "L", "#"],
			["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
			["#", ".", "#", "L", "L", "L", "L", ".", "#", "#"]
		], day.doIter())

		XCTAssertEqual(37, day.part1())
    }
	
	func testPart2WiithSample2() throws {
		let day: Day11 = Day11(data: input)
		day.array = [
			["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
			["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
			["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
			["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
			["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
			["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
			[".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
			["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
			["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
			["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"]
		]
		
		var iter = day.doIter(5)
		XCTAssertEqual([
			["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
			["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
			["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
			["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
			[".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
			["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
			["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
			["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"]
		], iter)
		day.array = iter
		
		iter = day.doIter(5)
		XCTAssertEqual([
			["#", ".", "L", "L", ".", "L", "L", ".", "L", "#"],
			["#", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
			["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
			["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
			["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
			["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
			[".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
			["L", "L", "L", "L", "L", "L", "L", "L", "L", "#"],
			["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
			["#", ".", "L", "L", "L", "L", "L", ".", "L", "#"]
		], iter)
		day.array = iter
		
		iter = day.doIter(5)
		XCTAssertEqual([
			["#", ".", "L", "#", ".", "#", "#", ".", "L", "#"],
			["#", "L", "#", "#", "#", "#", "#", ".", "L", "L"],
			["L", ".", "#", ".", "#", ".", ".", "#", ".", "."],
			["#", "#", "L", "#", ".", "#", "#", ".", "#", "#"],
			["#", ".", "#", "#", ".", "#", "L", ".", "#", "#"],
			["#", ".", "#", "#", "#", "#", "#", ".", "#", "L"],
			[".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
			["L", "L", "L", "#", "#", "#", "#", "L", "L", "#"],
			["#", ".", "L", "#", "#", "#", "#", "#", ".", "L"],
			["#", ".", "L", "#", "#", "#", "#", ".", "L", "#"],
		], iter)
	}

}
